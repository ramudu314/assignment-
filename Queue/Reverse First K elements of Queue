static Queue<Integer> ReverseK(Queue<Integer> queue, int k) { 
        //enter your code here
         if (k <= 0 || k > queue.size()) {
            return queue;
        }

        Stack<Integer> stack = new Stack<>();

        // Push the first K elements into the stack
        for (int i = 0; i < k; i++) {
            stack.push(queue.poll());
        }

        // Pop elements from the stack and enqueue them back to the queue
        while (!stack.isEmpty()) {
            queue.add(stack.pop());
        }

        // Enqueue the remaining elements in the original order
        for (int i = 0; i < queue.size() - k; i++) {
            queue.add(queue.poll());
        }

        return queue;
    }

